===== BDB-based Message Store Plugin for Apache Qpid C++ Broker ======

===============================================================================================

                                       with open('zencodes.                                  
                                 `num` in numbers    synchronized                            
                             datetime d      glob.      sys.argv[2] .                        
                          def myclass   `..` @@oscla   org.    .  class {                    
                       displ  hooks(   public static void   ma     functor:                  
                     $myclass->method(  impport sys, os.pipe `    @param name`               
                   fcl   if(system(cmd) myc.  /de   `  $card(  array("a"   srand             
                 format  lists:  ++:   conc    ++ "my  an    WHERE  for(   == myi            
               `sys:  myvalue(myvalue) sys.t    Console.W   try{    rais     using           
              connec  SELECT * FROM table mycnf  acco desc and or selector::clas  at         
             openldap string  sys.   print "zenc der " { 'a':   `ls -l` <  appe &firs        
            import Tkinter    paste( $obh  &a or it myval  bro roll:   :: [] require a       
           case `` super. +y  <svg x="100">   expr    say " %rooms 1  --account fb-  yy      
          proc     meth Animate => send(D, open)     putd    EndIf 10  whi    myc`  cont     
         and     main (--) import loop $$ or  end onload   UNION WITH tab    timer 150 *2    
         end. begin True  GtkLabel *label    doto partition te    let auto  i<- (i + d ) ;   
        .mushup ``/.   ^/zenc/    myclass->her flv    op             <> element >> 71   or   
        QFileDi   :   and  ..    with myc   toA  channel::bo    myc isEmpty a  not   bodt;  
        class T   public pol    str    mycalc d   pt &&a     *i fc  add                ^ac  
        ::zencoders::core::namespac   boost::function st  f = std:   ;;      int     assert 
        cou   << endl   public genera    #include "b ost   ::ac myna  const cast<char*> mys 
        &ac   size_t   return ran  int (*getNextValue)(void) ff   double  sa_family_t famil 
        pu         a   do puts("       ac    int main(int argc, char*    "%5d    struct nam 
        cs                float       for     typedef     enum  puts             getchar()   
        if(                         else      #define      fp    FILE* f           char* s   
         i++                                  strcat(            %s                    int   
         31]                                  total+=                                  do    
          }do                                 while(1)                                sle    
          getc                               strcpy( a                               for     
           prin                             scanf(%d, &                             get      
            #inc                          <stdio.h> #ifn                           arg       
             int                       void myfunc(int par                       retu        
               BEQ                 BGEZAL R1 10 ANDI R1 R2 1                    SYS          
                XOR               SYSCAL 5 SLTIU   MFLO 15 SW                 JAL            
                  BNE           BLTZAL R1 1 LUI   001 NOOP MULTU            SLLV             
                    MOV R1     ADD R1 R2  JUMP   10 1001 BEQ R1 R2 1      AND                
                       1101  1010001100  111 001 01  1010 101100 1001   100                  
                         110110 100   0  01  101 01100 100 100 1000100011                    
                            11101001001  00   11  100    11  10100010                        
                                000101001001 10  1001    101000101                           
                                     010010010010110101001010             

For further information:
ZenCoders Website : www.zencoders.org

===============================================================================================


-- PREREQUISITES --

 - qpid broker headers and libraries (see below)
 - all prerequisites for qpid (see qpid's cpp/INSTALL file)
 - berkeley db4  (tested with version 4.3.29)

For the qpid requirements you can either install the qpidd-devel package or
check-out the qpid source from:

  https://svn.apache.org/repos/asf/qpid/trunk/qpid

-- BUILDING --

The following steps should build the package (all from the cpp directory):

0. If you are using an svn checkout of qpidd, then build this package following
   the instructions in the cpp/INSTALL file from that project. The store will not
   link without the libqpidcommon.so library from that project. If you installed
   the qpidd package, then this library is installed.

1. './bootstrap' (This initializes the autotools)

2. If the qpidd package is installed, then:

   './configure'

   Otherwise, if using an svn checkout of qpidd (as opposed to installing
   the qpidd package), then:

   './configure --with-qpid-checkout=<path_to_qpid>'

   (Point to the top-level qpid dir in which the cpp and python dirs exist)

3. 'make' or 'make all' will build the module
   'make check' will run unit and system tests.

Note: Some system tests require qpid's python test framework, and therefore
will not run unless python is installed and qpidd is installed from
subversion and the --with-qpid-checkout option is used in configure.

-- DISTRIBUTION-SPECIFIC NOTES ---

On a RHEL4, some files must be patched to accomodate an early version of boost
and gcc. See cpp/rhel4-support/README. Note that there are some warnings seen on
RHEL4 builds and tests that are not present on other platforms.

On a Fedora system install prerequisites via:
  yum install db4-devel qpidd-devel

On a Debian-based system, install prerequisites via:
  apt-get install libdb4.3++-dev

On Debian, I need to get this file:
  /usr/include/db_cxx.h

